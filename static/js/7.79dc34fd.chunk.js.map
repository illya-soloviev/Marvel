{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks.js/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js"],"names":["View","_ref","data","name","description","thumbnail","id","imgStyle","_jsxs","className","children","_jsx","src","alt","style","Link","to","concat","RandomChar","_useState","useState","_useState2","_slicedToArray","characterInfo","setCharacterInfo","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateCharacter","Math","floor","random","then","onCharacterLoaded","setContent","onClick","mjolnir","CharList","props","charactersList","setCharactersList","_useState3","_useState4","offset","setOffset","_useState5","_useState6","newCharactersLoading","setNewCharactersLoading","_useState7","_useState8","charactersEnded","setCharactersEnded","getAllCharacters","onCharactersRequest","initial","onCharListLoaded","newCharactersList","ended","length","_toConsumableArray","charactersCardsRefs","useRef","renderCharacters","arr","characters","map","char","charIndex","CSSTransition","timeout","classNames","ref","elem","current","characterCardIndex","onCharacterSelected","forEach","characterCard","classList","remove","add","TransitionGroup","component","useMemo","Component","Spinner","ErrorMessage","Error","disabled","comics","comicsArr","i","comicInfo","resourceURI","slice","push","_Fragment","CharInfo","characterId","CharSearchForm","setChar","getCharacterByName","onCharLoaded","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","characterSelected","setCharacterSelected","Helmet","content","ErrorBoundary","decoration","display","width","height","objectFit","margin","img","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","apply","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","path","extension","homepage","urls","wiki","items","getAllComics","_ref4","_callee4","_args4","_context4","_transformComic","getComic","_ref5","_callee5","comicId","_context5","_x3","comicData","_comicData$textObject","title","pageCount","language","textObjects","price","prices","Skeleton","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","key","value","errorInfo","console","log","this","setState"],"mappings":"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","file":"static/js/7.79dc34fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom/cjs/react-router-dom';\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [characterInfo, setCharacterInfo] = useState({});\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n    \n    useEffect(() => {\n        updateCharacter();\n        // const timerId = setInterval(updateCharacter, 60000);\n\n        return () => {\n            // clearInterval(timerId);\n        };\n        // eslint-disable-next-line\n    }, []);\n    \n    const updateCharacter = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        clearError();\n        getCharacter(id)\n            .then(onCharacterLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharacterLoaded = (characterInfo) => {\n        setCharacterInfo(characterInfo);\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, characterInfo)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateCharacter} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, id} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <Link to={`/characters/${id}`} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </Link>\n                    {/* <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a> */}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newCharactersLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newCharactersLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process value');\n    }\n}\n\nconst CharList = (props) => {\n    const [charactersList, setCharactersList] = useState([]);\n    const [offset, setOffset] = useState(210);\n    const [newCharactersLoading, setNewCharactersLoading] = useState(false);\n    const [charactersEnded, setCharactersEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onCharactersRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onCharactersRequest = (offset, initial) => {\n        initial ? setNewCharactersLoading(false) : setNewCharactersLoading(true);\n\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharactersList) => {\n        let ended = false;\n        if (newCharactersList.length < 9) {\n            ended = true;\n        }\n\n        setCharactersList(charactersList => [...charactersList, ...newCharactersList]);\n        setNewCharactersLoading(false);\n        setOffset(offset => offset + 9);\n        setCharactersEnded(ended);\n    }\n\n    const charactersCardsRefs = useRef([]);\n\n    const changeActiveCharacterCard = (characterCardIndex) => {\n        charactersCardsRefs.current.forEach(characterCard => {\n            characterCard.classList.remove('char__item_selected');\n        });\n        charactersCardsRefs.current[characterCardIndex].classList.add('char__item_selected');\n    }\n\n    const renderCharacters = (arr) => {\n        const characters =  arr.map((char, charIndex) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (char.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={char.id} timeout={500} classNames={'char__item'}>\n                    <li \n                        className=\"char__item\"\n                        ref={elem => charactersCardsRefs.current[charIndex] = elem}\n                        onClick={() => {\n                            props.onCharacterSelected(char.id);\n                            changeActiveCharacterCard(charIndex);\n                        }}>\n                            <img src={char.thumbnail} alt={char.name} style={imgStyle}/>\n                            <div className=\"char__name\">{char.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {characters}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const characters = useMemo(() => {\n        return setContent(process, () => renderCharacters(charactersList), newCharactersLoading);\n        // eslint-disable-next-line\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {characters}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newCharactersLoading}\n                style={{'display': charactersEnded ? 'none' : 'block'}}\n                onClick={() => onCharactersRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharacterSelected: PropTypes.func.isRequired\n};\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom/cjs/react-router-dom';\nimport PropTypes from 'prop-types';\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [characterInfo, setCharacterInfo] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateCharacter();\n        // eslint-disable-next-line\n    }, [props.characterId]);\n    \n    const updateCharacter = () => {\n        const {characterId} = props;\n        if (!characterId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(characterId)\n            .then(onCharacterLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharacterLoaded = (characterInfo) => {\n        setCharacterInfo(characterInfo);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, characterInfo)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, id, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    const comicsArr = [];\n    for(let i = 0; i < comics.length; i++) {\n        if (i > 9) {\n            break;\n        }\n        let comicInfo = (\n            <Link className=\"char__comics-item\"\n                key={i}\n                to={'/comics/' + comics[i].resourceURI.slice(-5)}>\n                {comics[i].name}\n            </Link>\n        );\n        comicsArr.push(comicInfo);\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"abyss\" style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <Link to={`/characters/${id}`} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </Link>\n                        {/* <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a> */}\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsArr.length === 0 ? 'There are no comics with this character.' : null}\n                {comicsArr}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    characterId: PropTypes.number\n};\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));;\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [characterSelected, setCharacterSelected] = useState(null);\r\n\r\n    const onCharacterSelected = (id) => {\r\n        setCharacterSelected(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharacterSelected={onCharacterSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo characterId={characterSelected}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks.js/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5b384501e48304843a7e8a1c83146bf3';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? char.description.slice(0, 210) : 'There is no description for this character.',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComic = async (comicId) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${comicId}?${_apiKey}`);\r\n\t\treturn _transformComic(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformComic = (comicData) => {\r\n        return {\r\n\t\t\tid: comicData.id,\r\n\t\t\ttitle: comicData.title,\r\n\t\t\tdescription: comicData.description || \"There is no description\",\r\n\t\t\tpageCount: comicData.pageCount\r\n\t\t\t\t? `${comicData.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comicData.thumbnail.path + \".\" + comicData.thumbnail.extension,\r\n\t\t\tlanguage: comicData.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comicData.prices[0].price\r\n\t\t\t\t? `${comicData.prices[0].price}$`\r\n\t\t\t\t: \"not available\"\r\n        }\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacterByName,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type' : 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process value');\r\n    }\r\n}\r\n\r\nexport default setContent;","import { Component } from \"react/cjs/react.development\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error === true) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}